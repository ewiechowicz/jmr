{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["modalStyles","content","top","left","right","bottom","marginRight","transform","width","height","display","flexDirection","paddingRight","paddingLeft","App","state","modalOpen","login","password","onClick","_this","setState","onLoginSubmit","_callee","e","_this$state","res","result","regenerator_default","a","wrap","_context","prev","next","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","console","log","status","Error","message","alert","t0","String","stop","this","_this2","react_default","createElement","className","lib_default","isOpen","style","onSubmit","onChange","target","value","placeholder","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAIMA,SAAc,CAClBC,QAAU,CACRC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACXC,MAAO,IACPC,OAAQ,IACRC,QAAS,OACTC,cAAe,SACfC,aAAc,GACdC,YAAa,MAIIC,6MACnBC,MAAQ,CACNC,WAAW,EACXC,MAAO,GACPC,SAAU,MAGZC,QAAU,WACJC,EAAKL,MAAMC,WAIfI,EAAKC,SAAS,CACZL,WAAW,OAIfM,oDAAgB,SAAAC,EAAOC,GAAP,IAAAC,EAAAR,EAAAC,EAAAQ,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACdT,EAAEU,iBADYH,EAAAC,KAAA,EAAAP,EAIgBL,EAAKL,MAAzBE,EAJIQ,EAIJR,MAAOC,EAJHO,EAIGP,SAJHa,EAAAE,KAAA,EAKME,MAAM,gDAAiD,CACvEC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAExB,QAAOC,eAVpB,cAKNQ,EALMK,EAAAW,KAAAX,EAAAE,KAAA,EAYSP,EAAIiB,OAZb,UAYNhB,EAZMI,EAAAW,KAaZE,QAAQC,IAAIlB,GACU,OAAlBA,EAAOmB,OAdC,CAAAf,EAAAE,KAAA,eAeJ,IAAIc,MAAMpB,EAAOqB,SAfb,QAiBZC,MAAMtB,EAAOqB,SACb5B,EAAKC,SAAS,CACZL,WAAW,IAnBDe,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,SAsBZkB,MAAME,OAAMpB,EAAAmB,KAtBA,yBAAAnB,EAAAqB,SAAA7B,EAAA8B,KAAA,2IA0BP,IAAAC,EAAAD,KACP,OACEE,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,MAAMtC,QAASkC,KAAKlC,SACjCoC,EAAA1B,EAAA2B,cAACE,EAAA7B,EAAD,CACE8B,OAAQN,KAAKtC,MAAMC,UACnB4C,MAAO5D,GAEPuD,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,UAAf,+BACAF,EAAA1B,EAAA2B,cAAA,QAAMC,UAAU,aAAaI,SAAUR,KAAK/B,eAC1CiC,EAAA1B,EAAA2B,cAAA,SACEC,UAAU,QACVK,SAAU,SAAAtC,GAAC,OAAI8B,EAAKjC,SAAS,CAAEJ,MAAOO,EAAEuC,OAAOC,SAC/CC,YAAY,QACZC,KAAK,QACLF,MAAOX,KAAKtC,MAAME,QAEpBsC,EAAA1B,EAAA2B,cAAA,SACEC,UAAU,QACVK,SAAU,SAAAtC,GAAC,OAAI8B,EAAKjC,SAAS,CAAEH,SAAUM,EAAEuC,OAAOC,SAClDC,YAAY,WACZC,KAAK,WACLF,MAAOX,KAAKtC,MAAMG,WAEpBqC,EAAA1B,EAAA2B,cAAA,UAAQC,UAAU,SAASS,KAAK,UAAhC,oBAlEqBC,aCTbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAA1B,EAAA2B,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b9c1c1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport './App.css';\n\nconst modalStyles = {\n  content : {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    width: 365,\n    height: 340,\n    display: 'flex',\n    flexDirection: 'column',\n    paddingRight: 40,\n    paddingLeft: 40,\n  }\n};\n\nexport default class App extends Component {\n  state = {\n    modalOpen: false,\n    login: '',\n    password: '',\n  }\n\n  onClick = () => {\n    if (this.state.modalOpen) {\n      return;\n    }\n\n    this.setState({\n      modalOpen: true,\n    });\n  }\n\n  onLoginSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const { login, password } = this.state;\n      const res = await fetch('https://recruitment-api.pyt1.stg.jmr.pl/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ login, password }),\n      });\n      const result = await res.json();\n      console.log(result);\n      if (result.status !== 'ok') {\n        throw new Error(result.message);\n      }\n      alert(result.message);\n      this.setState({\n        modalOpen: false,\n      });\n    } catch (e) {\n      alert(String(e));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\" onClick={this.onClick}>\n        <Modal\n          isOpen={this.state.modalOpen}\n          style={modalStyles}\n        >\n          <div className=\"header\">Are you a Raspberry Knight?</div>\n          <form className=\"login-form\" onSubmit={this.onLoginSubmit}>\n            <input\n              className=\"input\"\n              onChange={e => this.setState({ login: e.target.value })}\n              placeholder=\"Email\"\n              type=\"email\"\n              value={this.state.login}\n            />\n            <input\n              className=\"input\"\n              onChange={e => this.setState({ password: e.target.value })}\n              placeholder=\"Password\"\n              type=\"password\"\n              value={this.state.password}\n            />\n            <button className=\"button\" type=\"submit\">LOG IN</button>\n          </form>\n        </Modal>\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}